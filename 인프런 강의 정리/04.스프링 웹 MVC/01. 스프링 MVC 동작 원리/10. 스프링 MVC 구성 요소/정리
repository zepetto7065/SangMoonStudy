Dispatcher servlet이 사용하는 여러가지의 Interface

DispatcherSerlvet의 기본 전략
    ● DispatcherServlet.properties
MultipartResolver
    content header 가 multipart -> binary 데이터를 부분적으로 쪼개어 보낸다
    파일을 꺼낼수 있도록 중간 처리를 해주는 MultipartResolver
    ● 파일 업로드 요청 처리에 필요한 인터페이스
    ● HttpServletRequest를 MultipartHttpServletRequest로 변환해주어 요청이 담고 있는
        File을 꺼낼 수 있는 API 제공.
    스프링 부트를 사용하면 아무런 설정을 하지않아도 파일업로드 처리 핸들러 사용가능
    -> StandardServletMultipartResolver
LocaleResolver
    ● 클라이언트의 위치(Locale) 정보를 파악하는 인터페이스
    -> 어느 지역에서 왔는지 , 지역 정보에 따라 MessageSource에서 적절한 언어의 Mesaage
    ● 기본 전략은 요청의 accept-language를 보고 판단.
    -> 대표적 구현체는 accept-header 헤더에 포함된 언어정보로 판단.
ThemeResolver
    ● 애플리케이션에 설정된 테마를 파악하고 변경할 수 있는 인터페이스
    -> 테마 key값을 view에 전달하고 적절한 resource(ex)css..)를 가져와서
    기본값은 fixed 기본적으로 사용하지않는다.
    화면을 랜더링
    ● 참고: https://memorynotfound.com/spring-mvc-theme-switcher-example/
HandlerMapping
    ● 요청을 처리할 핸들러를 찾는 인터페이스
    -> 기본적으로 2개의 핸들러 매핑
    -> BeanNameUrlHandlerMapping
     , RequestMappingHandlerMapping
HandlerAdapter
    ● HandlerMapping이 찾아낸 “핸들러”를 처리하는 인터페이스
    ● 스프링 MVC 확장력의 핵심
HandlerExceptionResolver
    ● 요청 처리 중에 발생한 에러 처리하는 인터페이스
    ->
RequestToViewNameTranslator
    ● 핸들러에서 뷰 이름을 명시적으로 리턴하지 않은 경우, 요청을 기반으로 뷰 이름을
    판단하는 인터페이스
    -> 뷰 이름을 생략할 경우 , 뷰의 이름을 찾아준다.
ViewResolver
    ● 뷰 이름(string)에 해당하는 뷰를 찾아내는 인터페이스
    -> 기본적으로 JSP를 지원한다.
FlashMapManager
    ● FlashMap 인스턴스를 가져오고 저장하는 인터페이스
    ● FlashMap은 주로 리다이렉션을 사용할 때 요청 매개변수를 사용하지 않고 데이터를
        전달하고 정리할 때 사용한다.
    ● redirect:/events
    ex -> /events/id/202