객체는 참조
테이블은 외래키(FK) 간 조인

연관관계의 주인

테이블 연관관계는 차이가 없다. 방향이라는 개념보다는 FK로 서로의 연관관계를 다 알 수 있다.
Member는 Team을 가졌지만 Team에서 Member를 갈수 없기때문에 List members를 넣어주자.

#객체와 테이블이 관계를 맺는 차이
회원 -> 팀, 팀 -> 회원

테이블 연관관계 = 1개
회원 <-> 팀 간의 양방향 ( 외래키로 인한 ) => 외래키 하나로 끝나버린다.

## 연관관계 주인
-> 객체의 양방향은 사실 단방향 관계 2개이다. A <=> B (x), A-> B, B->A (o)
-> 테이블의 양방향은 외래키 하나로 두테이블의 연관관계를 관리한다.
-> 그럼 객체 기준에서 어떤 것을 fk와 연결을 해야하는가? 가령 Member의 team인가 , Team의 List members인가
-> 단방향일때는 상관없지만, Team의 members도 신경을 써야한다.
-> 그래서... 둘 중 하나로 외래키를 관리해야한다. (=연관관계의 주인)
-> 그럼 누가? 외래키가 있는 곳을 주인으로 정해라 , oneToMany가 가지고 있는 쪽은 가짜 매핑
-> 주인(등록, 수정) , 주인x(읽기만) , 주인은 mappedBy 속성 사용 x 주인이아니면 mappedBy로 주인 지정
-> 왜? DB입장에서 보면 FK있는곳이 다 설명이 된다. 마찬가지로 ManyToOne에서 Many쪽이 연관관계로 정리된다. 1:n에서 n 쪽
-> 자동차와 바퀴 , 바퀴가 연관관계의 주인 