#참고 블로그
https://victorydntmd.tistory.com/74?category=682764

#용어 정리
Git 이란?
-> 버전관리를 위한 프로그램 Version Control System

영역?
-> 깃에는 세가지 영역이 존재
-> working directory : 현재 작업 공간, 추적(track)하지 않은 상태
-> index : stage 또는 staging area 준비 공간, 추적을 시작했으며 버전 등록 전
-> repository : 저장소를 의마한다.

Flow?
git init : .git 폴더를 생성
git add : working directory에서 변경된 파일을 staging area에 추가
git commit : staging area의 내용을 local repository에 확정
git push : local repository 내용을 remote repository로 업로드
git pull : local repository 내용을 remote repository 에서 가져온다
git clone : .git 포함한 remote repository의 파일들을 local repository에 복사합니다. 

병합?
git branch : 독립적인 working directory
head : 포인터를 의미하며, 지금 작업하는 branch 를 가르킴
merge : 2개의 브랜치에서 작업한 다른 내용을 하나로 합치는 것 

git reset vs git revert
git reset 은 특정 커밋으로 돌아가지만 , 되돌린 버전 이후의 버전들은 히스토리에서 삭제
git revert 는 reset 처럼 특정 버전으로 되돌아가지만 , 이력은 그대로 유지

#Rebase
- 주로 병합 간의 충돌시 사용
rebase 는 hitory를 변경하기 때문에 반드시 rebase 진행 후 '강제 푸쉬' 해주어야 한다.

#Cherry pick
원하는 커밋만 가져올 때 사용 , 가령 운영 서비스에 갑작스러운 버그 발생시 버그만 수정해야하고 
기존에 개발중인 내역은 푸쉬하고 싶지 않을떄 , 버그 수정건만 운영에 적용할수 있다.

#reset
soft - mixed와 비슷 하지만 stage 아래에 있다.
mixed - 변경은 하지만 기존에 푸쉬해놓았던 부분은 남겨놓는다. stage에 남겨놓는다. ( 복권은 샀지만 복권 번호는 머리속에 냄겨놓고 과거로 돌아간다. )
hard - 그냥 깔끔하게 되돌리겠다 라는 뜻

과거로 되돌린 후 , 해당 사항을 강제 푸쉬하면 원격에 적용 가능 ( 단, 강제 푸쉬는 혼자 쓰는 브랜치에서만 사용하도록 하자!!!)

#revert
잘못된 커밋을 되돌릴떄 사용한다. push해도 revert 가능

#stash 
변경사항을 임시 저장, track(추적) 중인 파일들만 들어간다. 신규파일 생성시에는 들어가지 않는다.


#CLI 명령어
git status : 현재 워킹트리 상태 확인
git init : git 저장소 생성
git config --global user.name : 사용자 이름 
-> 작업 PC가 공요이거나 프로젝트마다 다르게 할경우 , --global 옵션 빼기

git add
git commit
git pust [-u][원격저장소별병][브랜치이름]
git pull
git fetch [원격저장소별명][브랜치이름]
git merge [브랜치이름]

git log --oneline
